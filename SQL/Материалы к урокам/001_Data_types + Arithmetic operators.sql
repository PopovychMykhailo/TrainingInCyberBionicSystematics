/****************************************************************************
************************   T R A N S A C T - S Q L   ************************
*****************************************************************************
*****  Lesson I  *******      INTRO. DATA TYPES      ************************
****************************************************************************/

--		  однострочный комментарий.

/*
	...   могострочный комментарий.
*/

--Data Types

---- !!!Все описание типы могу иметь значение NULL!!!

/****************************************************************************
*					Точные числовые типы (Exact Numeric Types)				*  
****************************************************************************/

---- BIT
------ Аналог логического значения, (bool)
------ Занимает 1 байт
------ переполнение всегда дает значение 1
------ База данних стараеться групировать битовие значения в одни блок для 
------ економии памяти

DECLARE @someBit bit = 0 --объявление и инициализаци¤ переменной типа bit 
PRINT @someBit

SET @someBit = 123
PRINT @someBit


---- TINYINT
------ хранит числа от 0 до 255
------ переполнение дает Arithmetic overflow error
------ Занимает 1 байт

DECLARE @someTinyInt tinyInt  = 255
PRINT @someTinyInt


---- SMALLINT
------ хранит числа от –32 768 до 32 767
------ переполнение дает Arithmetic overflow error
------ Занимает 2 байт

DECLARE @someSmallInt smallInt = 32767
PRINT @someSmallInt


---- INT (INTEGER)
----- хранит числа от –2 147 483 648 до 2 147 483 647
----- переполнение дает Arithmetic overflow error
----- Занимает 4 байт

DECLARE @someInt int = 123 --объявление и инициализаци¤ переменной типа bit 
PRINT @someInt

SET @someInt = 2147483647 + 1
PRINT @someInt


---- BIGINT
----- хранит числа от -9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
----- переполнение дает Arithmetic overflow error
----- Занимает 8 байт

DECLARE @someBigInt bigint = 9223372036854775807
PRINT @someBigInt

---- DECIMAL (NUMERIC - синоним DECIMAL)
------ хранит числа с фиксированой точностю
------ синтаксис: DECIMAL(точность, масштаб)
-------- точность: количество цифр в числе [1, 38]
-------- масштаб: количество цифр после запятой [0, точность]
------ зависимость размера от точности:
-------- (1 - 9):	5 байт
-------- (10 - 19): 9 байт
-------- (20 - 28): 13 байт
-------- (29 - 38): 17 байт
------ переполнение:
-------- до запятой дает Arithmetic overflow error
-------- после запятой выполняет округление значение

DECLARE @someDecimal1 decimal = 123.56 --значение по умолчанию (18, 0) 
PRINT @someDecimal

DECLARE @someDecimal2 decimal(8,5) = 123.56
PRINT @someDecimal2

SET @someDecimal2 = 123.123456 -- округление
PRINT @someDecimal2

SET @someDecimal2 = 1234.56 -- ошибка
PRINT @someDecimal2

DECLARE @someNumeric1 numeric(3,2) = 3.14
PRINT @someNumeric1

DECLARE @someNumeric2 numeric = 25000
PRINT @someNumeric2


---- SMALLMONEY
------ денежное представление числа от -214748.3648 до 214748.3647
------ аналог типа DECIMAL(10,4), но менее точний при вичислениях
------ переполнение дает Arithmetic overflow error
------ Занимает 4 байт

DECLARE @someSmallMoney smallmoney = 25.50
PRINT @someSmallMoney


---- MONEY
------ денежное представление числа от –922337203685477.5808 до 92233720 685477.5807
------ аналог типа DECIMAL(19,4), но менее точний при вичислениях
------ переполнение дает Arithmetic overflow error
------ Занимает 8 байт

DECLARE @someMoney money = 1000000.52
PRINT @someMoney


/****************************************************************************
*			Приблизительные числовые типы (Approximate Numeric Types)		*  
****************************************************************************/

---- FLOAT
------ хранит числа с плавающей запятой
------ синтаксис: FLOAT(точность)
-------- точность: количество бит, для мантиссы числа [1, 53]
------ зависимость размера и количества цифр от точности:
-------- (1 - 24):  7 цифр	4 байта
-------- (25 - 53):	15 цифр 8 байт
-------- SQL Server подбирает точнось для типа или 24 или 53
------ максимальная степень числа: 308
------ переполнение:
-------- степень большая за максимальную дает Arithmetic overflow error

DECLARE @someFloat1 float(24) = 145.4
PRINT @someFloat1

-- По умолчанию Float(53)
DECLARE @someFloat2 float = 5e300
PRINT @someFloat2


---- REAL
------ хранит числа с плавающей запятой
------ Аналог FLOAT(24)
------ Занимает 4 байт
------ максимальная степень числа: 38
------ переполнение:
-------- степень большая за максимальную дает Arithmetic overflow error

DECLARE @someReal real = 1e5
PRINT @someReal


/****************************************************************************
*				Типы данных даты и времени (Date and Time Types)			*  
****************************************************************************/

---- DATE
------ хранит дату от 1 января 1 года до 31 декабря 9999 года
------ Занимает 3 байта
------ формат строки для конвертации в DATE: 'ГГГГ-ММ-ДД'
-------- ГГГГ: от 0001 до 9999
-------- ММ: от 01 до 12
-------- ДД: от 01 до 31 (зависимо от месяца)
------ переполнение:
-------- всегда дает ошибку преобразования строки в Date

DECLARE @someDate date = '01-17-2017'
PRINT @someDate

SET @someDate = '20170117'
PRINT @someDate

SET @someDate = '17-01-2017'
PRINT @someDate


---- TIME
------ хранит время от 00:00:00 до 23:59:59
------ Занимает 5 байта
------ синтаксис: TIME(точность)
-------- точность: количество цифр после секунд [0, 7]
------ формат строки для конвертации в Time: 'ЧЧ:ММ[:СС[.дд]]'
-------- ЧЧ: от 0 до 23
-------- ММ: от 0 до 59
-------- СС: от 0 до 59
-------- дд: от 0000000 до 9999999
------ переполнение:
-------- в долях секунды округляеться
-------- всегда дает ошибку преобразования строки в Time

DECLARE @someTime1 time = '03:36:49:1'
PRINT @someTime1

SET @someTime1 = '03:36:49.1234567'
PRINT @someTime1

-- По умолчанию TIME(7)
DECLARE @someTime2 time = '23:59:59.1234567'
PRINT @someTime2


---- SMALLDATETIME
------ хранит дату и время от 1 января 1900 года — 6 июня 2079 года
------ Занимает 4 байта
------ формат строки для конвертации в DATETIME: 'ГГГГ-ММ-ДД чч:мм[:сс]'
-------- ГГГГ: от 1900 до 9999
-------- ММ: от 01 до 12
-------- ДД: от 01 до 31 (зависимо от месяца)
-------- чч: от 00 до 23
-------- мм: от 00 до 59
-------- сс: от 00 до 59 (секунди всегда округляються к минутам)
------ переполнение:
-------- всегда дает ошибку преобразования строки в SmallDateTime

DECLARE @smallDateTime SmallDateTime = '2018-01-01 12:35:40'
PRINT @smallDateTime


---- DATETIME
------ хранит дату и время от 1 января 1753 года до 31 декабря 9999 года
------ Занимает 8 байта
------ формат строки для конвертации в DATETIME: 'ГГГГ-ММ-ДД чч:мм[:сс[.дд]]'
-------- ГГГГ: от 1753 до 9999
-------- ММ: от 01 до 12
-------- ДД: от 01 до 31 (зависимо от месяца)
-------- чч: от 00 до 23
-------- мм: от 00 до 59
-------- сс: от 00 до 59
-------- дд: от 001 до 999
------ переполнение:
-------- всегда дает ошибку преобразования строки в DATETIME

DECLARE @someDateTime datetime = '01-17-2017 03:36:49'
PRINT @someDateTime

SET @someDateTime = '20170117 03:36:49:123'
PRINT @someDateTime


---- DATETIME2
------ хранит дату и время от 1 января 0001 года до 31 декабря 9999 года
------ синтаксис: DATETIME2(точность)
-------- точность: количество цифр после секунд [0, 7]
------ зависимость размера от точности:
-------- (1-2): 6 байт
-------- (3-4): 7 байт
-------- (4-7): 8 байт
------ формат строки для конвертации в DATETIME: 'ГГГГ-ММ-ДД чч:мм[:сс[.дд]]'
-------- ГГГГ: от 0001 до 9999
-------- ММ: от 01 до 12
-------- ДД: от 01 до 31 (зависимо от месяца)
-------- чч: от 00 до 23
-------- мм: от 00 до 59
-------- сс: от 00 до 59
-------- дд: от 0000001 до 9999999
------ переполнение:
-------- в долях секунды округляеться
-------- всегда дает ошибку преобразования строки в DATETIME2

DECLARE @someDateTime2_1 datetime2(3) = '2018-01-01 12:42:13.1234567'
PRINT @someDateTime2_1

-- По умолчания DateTime2(7)
DECLARE @someDateTime2_2 datetime2 = '2018-01-01 12:42:13.1234567'
PRINT @someDateTime2_2


---- DATETIMEOFFSET
------ хранит дату и время от 1 января 0001 года до 31 декабря 9999 года
------ знимает 10 байта
------ синтаксис: DATETIMEOFFSET(точность)
-------- точность: количество цифр после секунд [0, 7]
------ формат строки для конвертации в DATETIME: 'ГГГГ-ММ-ДД чч:мм[:сс[.дд][{+|-}чп:мп]]'
-------- ГГГГ: от 0001 до 9999
-------- ММ: от 01 до 12
-------- ДД: от 01 до 31 (зависимо от месяца)
-------- чч: от 00 до 23
-------- мм: от 00 до 59
-------- сс: от 00 до 59
-------- дд: от 0000001 до 9999999
-------- чп: от -14 до +14
-------- мп: от 00 до 59
------ переполнение:
-------- в долях секунды округляеться
-------- всегда дает ошибку преобразования строки в DATETIMEOFFSET

DECLARE @someDateTimeOffset datetimeoffset(2) = '2018-01-01 12:00:00 +10:00'
PRINT @someDateTimeOffset


/****************************************************************************
*					Символьные строки (Character Strings)					*  
****************************************************************************/

---- CHAR
------ хранит строковые данные фиксированной длины не в юникоде
------ Занимает 1 байт каждый символ
------ синтаксис: CHAR(длина)
-------- длина: количество символов в строке [1, 8000]
------ переполнение:
-------- значение обрезаеться до указаной длины
-------- значение меньше максимально, всегда расширяеться до указаной длины 
-------- за счет пробелов

DECLARE @someStr1 char(20) = 'hello world'
PRINT @someStr1

-- По умолчания Char(1)
DECLARE @someStr2 char = 'a'
PRINT @someStr2


---- VARCHAR
------ хранит строковые данные переменной длины не в юникоде
------ Занимает 1 байт каждый символ
------ синтаксис: VARCHAR(длина)
-------- длина: количество символов в строке [1, 8000]
---------- можно задать константу max, тогда длина строки: 2147483647 (2 ГБ)
------ переполнение:
-------- значение обрезаеться до максимальной длины

DECLARE @varStr varchar(12) = 'hello world'
PRINT @varStr

DECLARE @varMaxStr varchar(max) = 'Goodbay'
PRINT @varMaxStr

-- По умолчания VARCHAR(1)
DECLARE @someVarStr varchar = 'a'
PRINT @someVarStr


------ TEXT
------ хранит строковые данные переменной длины не в юникоде
------ аналог VARCHAR(max)
------ устаревший, нужно избегать!!!
------ занимает 1 байт каждий символ
------ максимальная длина: 2147483647 (2 ГБ)

--DECLARE @someText text


---- NCHAR
------ хранит строковые данные фиксированной длины в юникоде
------ Занимает 2 байт каждый символ
------ синтаксис: NCHAR(длина)
-------- длина: количество символов в строке [1, 4000]
------ переполнение:
-------- значение обрезаеться до указаной длины
-------- значение меньше максимально, всегда расширяеться 
-------- до указаной длины за счет пробелов

DECLARE @someNChar1 nchar(15) = N'какой-то текст'
PRINT @someNChar1

DECLARE @someNChar2 nchar(20) = 'привет мир'
PRINT @someNChar2

DECLARE @someNChar3 nchar(max) = 'привет мир, я тут!!!'
PRINT @someNChar3

-- По умолчанию NCHAR(1)
DECLARE @someNChar4 nchar = 'ю'
PRINT @someNChar4


---- NVARCHAR
------ хранит строковые данные переменной длины не в юникоде
------ Занимает 2 байт каждый символ
------ синтаксис: NVARCHAR(длина)
-------- длина: количество символов в строке [1, 4000]
---------- можно задать константу max, тогда длина строки: 1073741823 (2 ГБ)
------ переполнение:
-------- значение обрезаеться до максимальной длины

DECLARE @nvarStr nvarchar(12) = 'привет мир!'
PRINT @nvarStr

DECLARE @nvarMaxStr nvarchar(max) = 'Пока!'
PRINT @nvarMaxStr

-- По умолчания NVarChar(1)
DECLARE @nvarMinStr nvarchar = 'a'
PRINT @nvarMinStr


---- NTEXT
------ хранит строковые данные переменной длины не в юникоде
------ аналог NVARCHAR(max)
------ устаревший, нужно избегать!!!
------ занимает 2 байт каждий символ
------ максимальная длина: 1073741823 (2 ГБ)

--DECLARE @someNText ntext

/****************************************************************************
*					Двоичные данные (Binary Strings)						*  
****************************************************************************/                                 

---- BINARY
------ хранит двоичные данные фиксированной длины
------ синтаксис: BINARY(длина)
---------- длина: количество байтов [1, 8000]
------ переполнение:
-------- значение обрезаеться до указаной длины
-------- значение меньше длины, всегда расширяеться до указаной длины за счет нулей

DECLARE @someBinary binary(4) = 0x800000FF
PRINT @someBinary

-- По умолчания BINARY(1)
DECLARE @oneByte binary = 0xAF
PRINT @oneByte


---- VARBINARY
------ хранит двоичные данные переменной длины
------ синтаксис: VARBINARY(длина)
---------- длина: количество байтов [1, 8000]
------------ можно задать константу max, тогда размер поля: 2147483647 (2 ГБ)
------ переполнение:
-------- значение обрезаеться до максимальной длины

DECLARE @someVarBinary varbinary(5) = 0xFF
PRINT @someVarBinary

DECLARE @varBigData varbinary(max) = 0xAEF0FF93FC
PRINT @varBigData

-- По умолчания VARBINARY(1)
DECLARE @varOneByte varbinary = 0xFF;
PRINT @varOneByte


---- Image
------ хранит двоичные данные переменной длины
------ аналог VARBINARY(max)
------ устаревший, нужно избегать
------ максимальная длина: 2147483647 (2 ГБ)

--DECLARE @someImage image


/****************************************************************************
*****************************************************************************
*						INTRO. Arithmetic operators							*
*****************************************************************************
****************************************************************************/

--Arithmetic operators
--приоритет типов данных https://msdn.microsoft.com/library/ms190309(SQL.130).aspx

---- оператор + (сложение)

DECLARE @x int = 123, @y int = 456
SELECT @x + @y

DECLARE @date datetime = '20170117 12:00'
SELECT @date + 1.25

SELECT 'Hello, ' + 'world!' --конкатенация

 ---- оператор - (вычитание)
 ---- оператор * (умножение)
 ---- оператор / (деление)

SELECT  10/3,
		17/10,
		10./3,
		10/3.

SELECT 1/0 -- Divide by zero error encountered. 

 ---- оператор % (остаток от деления)

SELECT  7/5,
		7%5
